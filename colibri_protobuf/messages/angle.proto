syntax = "proto3";

package colibri.angle;

option csharp_namespace = "Colibri.Api.Messages.Angle";

import "messages/general.proto";
import "messages/system.proto";

message ArrayTable {
  repeated uint32 array_table = 1;
}

message AngSysParam {
  bool enable = 1;
  uint32 ang_trig_freq = 2;
  uint32 flash_time_led1 = 3;
  uint32 flash_time_led2 = 4;
  uint32 head1_threshold = 5;
  uint32 head2_threshold = 6;
  float ang_offset = 7;
  .colibri.angle.Cleanness cleanness = 8;
}

message AngRad {
  float ang_rad = 1;
  .colibri.general.AbsTimeStamp tstamp = 2;
}

message AngPixImg {
  repeated uint32 pix_img1 = 1;
  repeated uint32 pix_img2 = 2;
  .colibri.general.AbsTimeStamp tstamp = 3;
}

message AngPixImgArrayRequest {
  uint32 n = 1;
  uint32 delay_usec = 2;
}

message AngPixImgArrayReply {
  repeated .colibri.angle.AngPixImg pix_images = 1;
  repeated .colibri.angle.AngRad angles = 2;
}

message AngArrayTable {
  .colibri.angle.ArrayTable table1 = 1;
  .colibri.angle.ArrayTable table2 = 2;
}

message AngleSysReply {
  .colibri.angle.AngSysParam sys_param = 1;
  .colibri.angle.AngRad angle = 2;
  .colibri.angle.AngPixImg pix_img = 3;
  .colibri.angle.AngArrayTable array_table = 4;
}

message AnglePixImgReply {
  .colibri.angle.AngPixImg pix_img = 1;
}

message AngleRadReply {
  double angle = 1;
  uint32 error_code = 2;
}

message AngleSEPCommandRequest {
  uint32 command_id = 1;
  bytes payload = 2;
}

message AngleSEPCommandReply {
  int32 ret = 1;
  bytes payload = 2;
}

message AngleValue {
  oneof Value {
    uint32 uchar = 2;
    int32 short = 3;
    uint32 ushort = 4;
    int32 long = 5;
    double double = 7;
  }
}

message AngleValueGetRequest {
  uint32 id = 1;
}

message AngleValueReply {
  uint32 id = 1;
  .colibri.angle.AngleValue Value = 2;
}

message AngleValuePutRequest {
  uint32 id = 1;
  .colibri.angle.AngleValue value = 2;
}

message AngleCalibration {
  reserved "coarse_peak_tolerance";
  reserved "peak_distance_low_bit";
  reserved "peak_distance_high_bit";
  reserved 3 to 5;
  uint32 marsh_threshold = 1;
  uint32 fine_peak_tolerance = 2;
  uint32 head_offset = 6;
  uint32 exposure_pulse_width = 7;
  .colibri.angle.ArrayTable array_table = 8;
  .colibri.angle.Head head = 9;
}

message AngleCalibParam {
  repeated .colibri.angle.AngleCalibration calibration = 1;
  .colibri.system.SystemRevisionReply device_info = 2;
}

message AngleSetFlashPulseWidthsRequest {
  repeated uint32 flash_pulse_widths = 1;
}

enum Cleanness {
  INVALID_CLEANNESS = 0;
  OPEN = 1;
  DONE = 2;
}

enum Head {
  INVALID_HEAD = 0;
  HEAD1 = 1;
  HEAD2 = 2;
}

